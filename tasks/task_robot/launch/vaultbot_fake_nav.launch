<?xml version="1.0" ?>
<launch>
  <!-- The name of the parameter under which the URDF is loaded; Name of robot URDF package-->
  <arg name="robot_description" default="robot_description"/>

  <!-- Load universal robot description format (URDF) -->
  <param name="$(arg robot_description)" command="$(find xacro)/xacro '$(find vaultbot_description)/urdf/vaultbot_robot.urdf.xacro'"/>
  
  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="false"/>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen"/>

  <!-- Run RViz with navigation.rviz configuration -->
  <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false" output="screen" />

  <!-- start navigation simulation -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find youbot_simpack)/map/maze.yaml"/>

  <!-- publish a TF between /map and /odom -->
  <node name="static_transform_publisher" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 0 map odom 10"/>
  
  <!-- start the fake odometry publisher, which provides TF from /odom to /base_footprint and publishes odom messages based on cmd_vel -->
  <!--rosparam command="load" file="$(find fake_odom_publisher)/config/frames.yaml" /-->
  <node name="fake_odom_publisher" pkg="fake_odom_publisher" type="fake_odom_publisher" respawn="true" output="screen">
    <param name="odom_frame" value="odom" />
    <param name="base_frame" value="base_link" />
  </node>

  <!-- start navigation -->

  <include file="$(find husky_navigation)/launch/move_base.launch">
    <arg name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <arg name="base_global_planner" value="navfn/NavfnROS" />
  </include>

</launch>
